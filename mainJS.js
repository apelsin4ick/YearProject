const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WEATHER_API_KEY = "38c3540b855e40cf8c2150413251505"; 
const BOT_TOKEN = "7800321238:AAGpNKr1CaYGweApXoft2HFCrwcR_Fardw8"; 

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, {polling: true});

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
function getMainKeyboard() {
    return {
        keyboard: [["–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è"]],
        resize_keyboard: true
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
function getCitiesKeyboard(cities) {
    const buttons = cities.map(city => [{text: city}]);
    buttons.push([{text: "–ù–∞–∑–∞–¥"}]);
    return {
        keyboard: buttons,
        resize_keyboard: true
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
async function getWeather(city, days = 1) {
    const url = "http://api.weatherapi.com/v1/forecast.json";
    const params = {
        key: WEATHER_API_KEY,
        q: city,
        days: days,
        lang: "ru"
    };
    
    try {
        const response = await axios.get(url, {params});
        return response.data;
    } catch (error) {
        console.error("Error fetching weather:", error);
        return null;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(
        chatId,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        {
            reply_markup: getMainKeyboard()
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–æ—Ä–æ–¥ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏)
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–µ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if (text.startsWith('/')) return;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º userData –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!bot.userData) bot.userData = {};
    if (!bot.userData[chatId]) bot.userData[chatId] = {};
    
    const userData = bot.userData[chatId];
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!userData.recentCities) {
        userData.recentCities = [];
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if (text === "–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å") {
        if (userData.recentCities.length > 0) {
            bot.sendMessage(
                chatId,
                "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π:",
                {
                    reply_markup: getCitiesKeyboard(userData.recentCities)
                }
            );
            userData.action = "current";
        } else {
            bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:");
            userData.action = "current";
        }
    } else if (text === "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è") {
        if (userData.recentCities.length > 0) {
            bot.sendMessage(
                chatId,
                "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π:",
                {
                    reply_markup: getCitiesKeyboard(userData.recentCities)
                }
            );
            userData.action = "forecast";
        } else {
            bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:");
            userData.action = "forecast";
        }
    } else if (text === "–ù–∞–∑–∞–¥") {
        bot.sendMessage(
            chatId,
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            {
                reply_markup: getMainKeyboard()
            }
        );
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–ª –Ω–æ–≤—ã–π
        const city = text;
        const action = userData.action;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ (–º–∞–∫—Å–∏–º—É–º 3)
        if (!userData.recentCities.includes(city)) {
            userData.recentCities.unshift(city);
            userData.recentCities = userData.recentCities.slice(0, 3);
        }

        if (action === "current") {
            const weatherData = await getWeather(city);
            if (!weatherData) {
                bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.");
                return;
            }
            
            const current = weatherData.current;
            const location = weatherData.location;
            const message = (
                `üå§ –ü–æ–≥–æ–¥–∞ –≤ ${location.name} (${location.country}):\n` +
                `üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${current.temp_c}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${current.feelslike_c}¬∞C)\n` +
                `‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${current.condition.text}\n` +
                `üí® –í–µ—Ç–µ—Ä: ${current.wind_kph} –∫–º/—á\n` +
                `üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${current.humidity}%`
            );
            bot.sendMessage(chatId, message, {reply_markup: getMainKeyboard()});

        } else if (action === "forecast") {
            const weatherData = await getWeather(city, 3);
            if (!weatherData) {
                bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.");
                return;
            }
            
            const location = weatherData.location;
            const forecastDays = weatherData.forecast.forecastday;
            let message = `üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –¥–ª—è ${location.name}:\n\n`;

            for (const day of forecastDays) {
                const date = day.date;
                const maxTemp = day.day.maxtemp_c;
                const minTemp = day.day.mintemp_c;
                const condition = day.day.condition.text;
                message += (
                    `üìÖ ${date}:\n` +
                    `‚¨Ü –ú–∞–∫—Å: ${maxTemp}¬∞C, ‚¨á –ú–∏–Ω: ${minTemp}¬∞C\n` +
                    `‚òÅ ${condition}\n\n`
                );
            }
            bot.sendMessage(chatId, message, {reply_markup: getMainKeyboard()});
        } else {
            bot.sendMessage(
                chatId,
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá",
                {
                    reply_markup: getMainKeyboard()
                }
            );
        }
//
    }
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...");
