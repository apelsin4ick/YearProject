import logging
import time
from datetime import datetime
from typing import Dict, List, Optional, Literal

import requests
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEATHER_API_KEY = "38c3540b855e40cf8c2150413251505"
BOT_TOKEN = "7996076983:AAHjvQBLIp-UyoLy1fT7pYu9HwJITTnD2C8"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–∏–ø—ã –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
WeatherAction = Literal["current", "forecast"]

class PerformanceStats:
    def __init__(self):
        self.total_requests = 0
        self.total_response_time = 0
        self.api_response_times = []
        self.last_10_response_times = []
        self.errors = 0

    def update(self, response_time: int):
        self.total_requests += 1
        self.total_response_time += response_time
        self.last_10_response_times.append(response_time)
        if len(self.last_10_response_times) > 10:
            self.last_10_response_times.pop(0)

    def __str__(self):
        avg_response = (self.total_response_time / self.total_requests) if self.total_requests > 0 else 0
        last_10_avg = (sum(self.last_10_response_times) / len(self.last_10_response_times)) if self.last_10_response_times else 0
        last_api = self.api_response_times[-1]["time"] if self.api_response_times else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        return (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {self.total_requests}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_response:.2f} –º—Å\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10: {last_10_avg:.2f} –º—Å\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {self.errors}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π API: {last_api} –º—Å"
        )

class UserData:
    def __init__(self):
        self.recent_cities: List[str] = []
        self.action: Optional[WeatherAction] = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
performance_stats = PerformanceStats()
user_states: Dict[int, UserData] = {}

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [["–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å", "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è"], ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"]],
        resize_keyboard=True,
    )

def get_cities_keyboard(cities: List[str]):
    buttons = [[city] for city in cities]
    buttons.append(["–ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def get_weather(city: str, days: int = 1) -> Optional[Dict]:
    start_time = time.time()
    url = "http://api.weatherapi.com/v1/forecast.json"
    params = {
        "key": WEATHER_API_KEY,
        "q": city,
        "days": days,
        "lang": "ru",
    }

    try:
        response = requests.get(url, params=params)
        response_time = int((time.time() - start_time) * 1000)
        
        performance_stats.api_response_times.append({
            "endpoint": "weatherAPI",
            "time": response_time,
            "timestamp": datetime.now().isoformat(),
        })
        
        return response.json()
    except Exception as error:
        logger.error(f"Weather API error: {error}")
        performance_stats.errors += 1
        return None

async def handle_weather_response(update: Update, city: str, days: int):
    weather_data = await get_weather(city, days)
    if not weather_data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
        return False

    location = weather_data["location"]
    if days == 1:
        current = weather_data["current"]
        message = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {location['name']} ({location['country']}):\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['temp_c']}¬∞C\n"
            f"‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current['condition']['text']}\n"
            f"üí® –í–µ—Ç–µ—Ä: {current['wind_kph']} –∫–º/—á\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%"
        )
    else:
        forecast_days = weather_data["forecast"]["forecastday"]
        message = f"üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –¥–ª—è {location['name']}:\n\n"
        for day in forecast_days:
            message += (
                f"üìÖ {day['date']}:\n"
                f"‚¨Ü –ú–∞–∫—Å: {day['day']['maxtemp_c']}¬∞C\n"
                f"‚¨á –ú–∏–Ω: {day['day']['mintemp_c']}¬∞C\n"
                f"‚òÅ {day['day']['condition']['text']}\n\n"
            )

    await update.message.reply_text(message, reply_markup=get_main_keyboard())
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    start_time = time.time()
    chat_id = update.effective_chat.id
    
    if chat_id not in user_states:
        user_states[chat_id] = UserData()
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
    )
    
    performance_stats.update(int((time.time() - start_time) * 1000))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    start_time = time.time()
    chat_id = update.effective_chat.id
    text = update.message.text

    if text.startswith("/"):
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = user_states.setdefault(chat_id, UserData())

    if text == "–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å":
        if user.recent_cities:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:",
                reply_markup=get_cities_keyboard(user.recent_cities),
            )
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        user.action = "current"

    elif text == "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è":
        if user.recent_cities:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:",
                reply_markup=get_cities_keyboard(user.recent_cities),
            )
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        user.action = "forecast"

    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏":
        await update.message.reply_text(str(performance_stats))

    elif text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
        city = text
        if city not in user.recent_cities:
            user.recent_cities.insert(0, city)
            user.recent_cities = user.recent_cities[:3]

        if user.action:
            success = await handle_weather_response(
                update, 
                city, 
                days=3 if user.action == "forecast" else 1
            )
            if success:
                user.action = None

    performance_stats.update(int((time.time() - start_time) * 1000))

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()