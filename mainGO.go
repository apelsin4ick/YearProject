package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const (
	WeatherAPIKey = "38c3540b855e40cf8c2150413251505"                
	BotToken      = "7889032903:AAGcqqPXteJxifA4B3cYrV1706nz88fYPVA"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç WeatherAPI
type WeatherResponse struct {
	Location Location `json:"location"`
	Current  Current  `json:"current"`
	Forecast Forecast `json:"forecast"`
}

type Location struct {
	Name    string `json:"name"`
	Country string `json:"country"`
}

type Current struct {
	TempC      float64 `json:"temp_c"`
	FeelsLikeC float64 `json:"feelslike_c"`
	Condition  struct {
		Text string `json:"text"`
	} `json:"condition"`
	WindKph  float64 `json:"wind_kph"`
	Humidity int     `json:"humidity"`
}

type Forecast struct {
	ForecastDay []ForecastDay `json:"forecastday"`
}

type ForecastDay struct {
	Date string `json:"date"`
	Day  struct {
		MaxTempC  float64 `json:"maxtemp_c"`
		MinTempC  float64 `json:"mintemp_c"`
		Condition struct {
			Text string `json:"text"`
		} `json:"condition"`
	} `json:"day"`
}

//  —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserData struct {
	RecentCities []string `json:"recent_cities"`
	Action       string   `json:"action"`
}

//  —Ö—Ä–∞–Ω–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
type PerformanceStats struct {
	mu                  sync.Mutex
	TotalRequests       int64
	TotalResponseTime   time.Duration
	Last10ResponseTimes []time.Duration
	Errors              int64
	APIResponseTimes    []APIResponseTime
}

type APIResponseTime struct {
	Endpoint  string
	Duration  time.Duration
	Timestamp time.Time
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
	userDataMap = make(map[int64]*UserData)
	stats       PerformanceStats
)

// Update –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func (ps *PerformanceStats) Update(duration time.Duration) {
	ps.mu.Lock()
	defer ps.mu.Unlock()

	ps.TotalRequests++
	ps.TotalResponseTime += duration

	ps.Last10ResponseTimes = append(ps.Last10ResponseTimes, duration)
	if len(ps.Last10ResponseTimes) > 10 {
		ps.Last10ResponseTimes = ps.Last10ResponseTimes[1:]
	}
}

// –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API
func (ps *PerformanceStats) RecordAPIResponse(endpoint string, duration time.Duration) {
	ps.mu.Lock()
	defer ps.mu.Unlock()

	ps.APIResponseTimes = append(ps.APIResponseTimes, APIResponseTime{
		Endpoint:  endpoint,
		Duration:  duration,
		Timestamp: time.Now(),
	})

	if len(ps.APIResponseTimes) > 100 {
		ps.APIResponseTimes = ps.APIResponseTimes[1:]
	}
}

// —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
func (ps *PerformanceStats) IncrementErrors() {
	ps.mu.Lock()
	defer ps.mu.Unlock()
	ps.Errors++
}

//  –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
func (ps *PerformanceStats) String() string {
	ps.mu.Lock()
	defer ps.mu.Unlock()

	avgResponse := time.Duration(0)
	if ps.TotalRequests > 0 {
		avgResponse = ps.TotalResponseTime / time.Duration(ps.TotalRequests)
	}

	last10Avg := time.Duration(0)
	if len(ps.Last10ResponseTimes) > 0 {
		var sum time.Duration
		for _, t := range ps.Last10ResponseTimes {
			sum += t
		}
		last10Avg = sum / time.Duration(len(ps.Last10ResponseTimes))
	}

	lastAPI := "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
	if len(ps.APIResponseTimes) > 0 {
		last := ps.APIResponseTimes[len(ps.APIResponseTimes)-1]
		lastAPI = fmt.Sprintf("%s (%.2f ms)", last.Endpoint, last.Duration.Seconds()*1000)
	}

	return fmt.Sprintf(
		"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n\n"+
			"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d\n"+
			"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %.2f ms\n"+
			"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10): %.2f ms\n"+
			"‚Ä¢ –û—à–∏–±–æ–∫: %d\n"+
			"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫ API: %s",
		ps.TotalRequests,
		avgResponse.Seconds()*1000,
		last10Avg.Seconds()*1000,
		ps.Errors,
		lastAPI,
	)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func getMainKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"),
			tgbotapi.NewKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"),
		),
	)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–æ—Ä–æ–¥–∞–º–∏
func getCitiesKeyboard(cities []string) tgbotapi.ReplyKeyboardMarkup {
	var rows [][]tgbotapi.KeyboardButton
	for _, city := range cities {
		rows = append(rows, tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(city)))
	}
	rows = append(rows, tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ù–∞–∑–∞–¥"),
	))
	return tgbotapi.NewReplyKeyboard(rows...)
}

// –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
func getWeather(city string, days int) (*WeatherResponse, error) {
	start := time.Now()

	baseURL := "http://api.weatherapi.com/v1/forecast.json"
	params := url.Values{}
	params.Add("key", WeatherAPIKey)
	params.Add("q", city)
	params.Add("days", fmt.Sprintf("%d", days))
	params.Add("lang", "ru")

	resp, err := http.Get(fmt.Sprintf("%s?%s", baseURL, params.Encode()))
	if err != nil {
		stats.IncrementErrors()
		return nil, err
	}
	defer resp.Body.Close()

	var weatherData WeatherResponse
	err = json.NewDecoder(resp.Body).Decode(&weatherData)
	if err != nil {
		stats.IncrementErrors()
		return nil, err
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API
	duration := time.Since(start)
	stats.RecordAPIResponse("weatherAPI", duration)

	return &weatherData, nil
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
func handleStart(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	start := time.Now()
	defer func() {
		stats.Update(time.Since(start))
	}()

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = getMainKeyboard()
	bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func handleMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	start := time.Now()
	defer func() {
		stats.Update(time.Since(start))
	}()

	text := update.Message.Text
	chatID := update.Message.Chat.ID

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
	if _, ok := userDataMap[chatID]; !ok {
		userDataMap[chatID] = &UserData{
			RecentCities: []string{},
		}
	}
	userData := userDataMap[chatID]

	switch text {
	case "–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å":
		if len(userData.RecentCities) > 0 {
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π:")
			msg.ReplyMarkup = getCitiesKeyboard(userData.RecentCities)
			bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
			bot.Send(msg)
		}
		userData.Action = "current"

	case "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è":
		if len(userData.RecentCities) > 0 {
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π:")
			msg.ReplyMarkup = getCitiesKeyboard(userData.RecentCities)
			bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
			bot.Send(msg)
		}
		userData.Action = "forecast"

	case "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏":
		msg := tgbotapi.NewMessage(chatID, stats.String())
		msg.ReplyMarkup = getMainKeyboard()
		bot.Send(msg)
		return

	case "–ù–∞–∑–∞–¥":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = getMainKeyboard()
		bot.Send(msg)

	default:
		city := text
		action := userData.Action

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ (–º–∞–∫—Å–∏–º—É–º 3)
		if !contains(userData.RecentCities, city) {
			userData.RecentCities = append([]string{city}, userData.RecentCities...)
			if len(userData.RecentCities) > 3 {
				userData.RecentCities = userData.RecentCities[:3]
			}
		}

		switch action {
		case "current":
			weatherData, err := getWeather(city, 1)
			if err != nil {
				msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
				bot.Send(msg)
				return
			}

			message := fmt.Sprintf(
				"üå§ –ü–æ–≥–æ–¥–∞ –≤ %s (%s):\n"+
					"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞C)\n"+
					"‚òÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s\n"+
					"üí® –í–µ—Ç–µ—Ä: %.1f –∫–º/—á\n"+
					"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%",
				weatherData.Location.Name,
				weatherData.Location.Country,
				weatherData.Current.TempC,
				weatherData.Current.FeelsLikeC,
				weatherData.Current.Condition.Text,
				weatherData.Current.WindKph,
				weatherData.Current.Humidity,
			)
			msg := tgbotapi.NewMessage(chatID, message)
			msg.ReplyMarkup = getMainKeyboard()
			bot.Send(msg)

		case "forecast":
			weatherData, err := getWeather(city, 3)
			if err != nil {
				msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
				bot.Send(msg)
				return
			}

			message := fmt.Sprintf("üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –¥–ª—è %s:\n\n", weatherData.Location.Name)
			for _, day := range weatherData.Forecast.ForecastDay {
				message += fmt.Sprintf(
					"üìÖ %s:\n"+
						"‚¨Ü –ú–∞–∫—Å: %.1f¬∞C, ‚¨á –ú–∏–Ω: %.1f¬∞C\n"+
						"‚òÅ %s\n\n",
					day.Date,
					day.Day.MaxTempC,
					day.Day.MinTempC,
					day.Day.Condition.Text,
				)
			}
			msg := tgbotapi.NewMessage(chatID, message)
			msg.ReplyMarkup = getMainKeyboard()
			bot.Send(msg)

		default:
			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá")
			msg.ReplyMarkup = getMainKeyboard()
			bot.Send(msg)
		}
	}
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ª–∞–π—Å–µ
func contains(slice []string, item string) bool {
	for _, s := range slice {
		if strings.EqualFold(s, item) {
			return true
		}
	}
	return false
}

func main() {
	bot, err := tgbotapi.NewBotAPI(BotToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				handleStart(bot, update)
			}
		} else {
			handleMessage(bot, update)
		}
	}
}
